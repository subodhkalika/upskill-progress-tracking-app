generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SubscriptionPlan {
  FREE
  PREMIUM
}

enum ResourceType {
  VIDEO
  BOOK
  ARTICLE
  OTHER
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum ResourceStatus {
  NOT_STARTED
  COMPLETED
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  name           String
  profilePicture String?
  subscription   SubscriptionPlan @default(FREE)

  learningStats  LearningStats?
  roadmaps       Roadmap[]
  tasks          Task[]
  achievements   Achievement[]
  resources      Resource[] // Saved personal resources

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model LearningStats {
  id               String   @id @default(uuid())
  user             User     @relation(fields: [userId], references: [id])
  userId           String   @unique

  totalHours       Float    @default(0)
  weeklyGoal       Float    @default(0)
  currentWeekHours Float    @default(0)
  dayStreak        Int      @default(0)
  bestStreak       Int      @default(0)
}

model Roadmap {
  id             String       @id @default(uuid())
  user           User         @relation(fields: [userId], references: [id])
  userId         String

  title          String
  description    String
  status         String
  timeSpent      Float        @default(0)
  lastUpdated    DateTime     @default(now())

  milestones     Milestone[]
  skills         Skill[]      @relation("RoadmapSkills")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Milestone {
  id             String       @id @default(uuid())
  roadmap        Roadmap      @relation(fields: [roadmapId], references: [id])
  roadmapId      String

  title          String
  description    String?
  dueDate        DateTime?
  completed      Boolean      @default(false)

  tasks          Task[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Task {
  id             String       @id @default(uuid())
  user           User         @relation(fields: [userId], references: [id])
  userId         String

  milestone      Milestone?   @relation(fields: [milestoneId], references: [id])
  milestoneId    String?

  name           String
  description    String?
  faculty        String?
  priority       TaskPriority
  dueDate        DateTime?
  estimatedTime  Float        @default(0)
  progress       Float        @default(0)

  resources      Resource[]   @relation("TaskResources")
  skills         Skill[]      @relation("TaskSkills")
  timeLogs       TimeLog[]

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model TimeLog {
  id        String   @id @default(uuid())
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    String

  duration  Float
  note      String?
  loggedAt  DateTime @default(now())
}

model Resource {
  id          String           @id @default(uuid())
  user        User             @relation(fields: [userId], references: [id])
  userId      String

  title       String
  description String?
  type        ResourceType
  status      ResourceStatus   @default(NOT_STARTED)
  duration    Float?
  rating      Float?

  skills      Skill[]          @relation("ResourceSkills")
  categories  Skill[]          @relation("ResourceCategories")
  tasks       Task[]           @relation("TaskResources")

  addedOn     DateTime         @default(now())
}

model Skill {
  id          String     @id @default(uuid())
  name        String     @unique

  roadmaps    Roadmap[]  @relation("RoadmapSkills")
  tasks       Task[]     @relation("TaskSkills")
  resources   Resource[] @relation("ResourceSkills")
  categories  Resource[] @relation("ResourceCategories")
}

model Achievement {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String

  title       String
  description String
  icon        String?
  earnedOn    DateTime @default(now())
}